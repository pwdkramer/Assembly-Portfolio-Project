Microsoft (R) Macro Assembler Version 14.30.30709.0	    12/04/22 15:42:17
4String Primitives and Macros    (Proj6_kramepat.asm	     Page 1 - 1


				TITLE String Primitives and Macros    (Proj6_kramepat.asm)

				; Author:	Patrick Kramer
				; Last Modified:	Dec 4 '22
				; OSU email address: kramepat@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:   6              Due Date:	12/4/22
				; Description:	This program prompts the user for 10 integers, positive or negative.
				;				It validates user input using the ReadVal procedure, which reads user input
				;				as a string of ASCII characters, checks for invalid characters, and converts it to a signed int to save into an array.
				;				It then loops through the int array to calculate the sum and average, all while re-converting the valid numbers
				;				back to a string to print back to the user. It then reports the sum and average as well.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert macro definitions here)

				; ---------------------------------------------------------------------------------
				; Name: mGetString
				;
				; Reads string input from user
				;
				; Postconditions: userString and userLen will be changed based on user input
				;
				; Receives:
				; prompt		=	string array address to prompt for input
				; userInput		=	variable to save user string
				; maxSize		=	max possible size of string
				; userLen		=	DWORD to record actual input size
				;
				; returns:
				; userInput		=	string inputed by user
				; userLen		=	size of user input
				; ---------------------------------------------------------------------------------
				mGetString	MACRO	prompt, userInput, maxSize, userLen
					PUSH	EAX
					PUSH	ECX
					PUSH	EDX

					MOV		EDX, prompt
					CALL	WriteString
					MOV		EDX, userInput
					MOV		ECX, maxSize
					CALL	ReadString
					MOV		userLen, EAX

					POP		EDX
					POP		ECX
					POP		EAX
				ENDM


				; ---------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; Prints the passed string to the console
				;
				; Receives:
				; myString = string array address
				; ---------------------------------------------------------------------------------
				mDisplayString	MACRO	myString
					PUSH	EDX

					MOV		EDX, myString
					CALL	WriteString

					POP		EDX
				ENDM

				; (insert constant definitions here)
 = 0000000B			MAX_SIZE = 11


 00000000			.data

				; (insert variable definitions here)
 00000000 46 75 6E 20 77	intro1		BYTE	"Fun with low-level I/O",13,10,
	   69 74 68 20 6C
	   6F 77 2D 6C 65
	   76 65 6C 20 49
	   2F 4F 0D 0A 43
	   6F 64 65 64 20
	   62 79 3A 20 50
	   61 74 72 69 63
	   6B 20 4B 72 61
	   6D 65 72 0D 0A
	   0D 0A 00
									"Coded by: Patrick Kramer",13,10,13,10,0
 00000035 50 6C 65 61 73	intro2		BYTE	"Please provide 10 signed decimal integers.",13,10,
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 0D 0A 45
	   61 63 68 20 6E
	   75 6D 62 65 72
	   20 6E 65 65 64
	   73 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   2D 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 0D
	   0A 41 66 74 65
	   72 20 69 6E 70
	   75 74 2C 20 49
	   20 77 69 6C 6C
	   20 64 69 73 70
	   6C 61 79 20 61
	   20 6C 69 73 74
	   20 6F 66 20 76
	   61 6C 69 64 20
	   69 6E 70 75 74
	   73 2C 0D 0A 74
	   68 65 20 73 75
	   6D 2C 20 61 6E
	   64 20 74 68 65
	   20 61 76 65 72
	   61 67 65 20 76
	   61 6C 75 65 2E
	   0D 0A 00
									"Each number needs to fit inside a 32-bit register.",13,10,
									"After input, I will display a list of valid inputs,",13,10,
									"the sum, and the average value.",13,10,0

 000000EC 50 6C 65 61 73	prompt1		BYTE	"Please enter a signed number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 0000010B 45 52 52 4F 52	error1		BYTE	"ERROR: You did not enter a signed number or it was too big.",13,10,0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 69
	   74 20 77 61 73
	   20 74 6F 6F 20
	   62 69 67 2E 0D
	   0A 00

 00000149 0D 0A 59 6F 75	results1	BYTE	13,10,"You entered the following numbers:",13,10,0
	   20 65 6E 74 65
	   72 65 64 20 74
	   68 65 20 66 6F
	   6C 6C 6F 77 69
	   6E 67 20 6E 75
	   6D 62 65 72 73
	   3A 0D 0A 00
 00000170 0D 0A 54 68 65	results2	BYTE	13,10,"The sum of these numbers is: ",0
	   20 73 75 6D 20
	   6F 66 20 74 68
	   65 73 65 20 6E
	   75 6D 62 65 72
	   73 20 69 73 3A
	   20 00
 00000190 0D 0A 54 68 65	results3	BYTE	13,10,"The truncated average is: ",0
	   20 74 72 75 6E
	   63 61 74 65 64
	   20 61 76 65 72
	   61 67 65 20 69
	   73 3A 20 00

 000001AD 2C 20 00		comma		BYTE	", ",0

 000001B0 0D 0A 0D 0A 54	farewell	BYTE	13,10,13,10,"Thank you for using my program. Have a good day!",13,10,0
	   68 61 6E 6B 20
	   79 6F 75 20 66
	   6F 72 20 75 73
	   69 6E 67 20 6D
	   79 20 70 72 6F
	   67 72 61 6D 2E
	   20 48 61 76 65
	   20 61 20 67 6F
	   6F 64 20 64 61
	   79 21 0D 0A 00

 000001E7  00000015 [		userInput	BYTE	21 DUP(0)			; holds up to 11 characters plus null terminator
	    00
	   ]
 000001FC 00000000		inpLen		SDWORD	?					; length of input
 00000200  0000000A [		numArray	SDWORD	10 DUP(?)			; array for after numbers are converted from ASCII
	    00000000
	   ]

 00000228 00000000		sum			SDWORD	0
 0000022C 00000000		avg			SDWORD	?

 00000230  0000000B [		outString	BYTE	MAX_SIZE DUP(0)
	    00
	   ]

 00000000			.code
 00000000			main PROC

				; (insert executable instructions here)

					; introduce program
					mDisplayString	OFFSET intro1
 00000000  52		     1		PUSH	EDX
 00000001  BA 00000000 R     1		MOV		EDX, OFFSET intro1
 00000006  E8 00000000 E     1		CALL	WriteString
 0000000B  5A		     1		POP		EDX
					mDisplayString	OFFSET intro2
 0000000C  52		     1		PUSH	EDX
 0000000D  BA 00000035 R     1		MOV		EDX, OFFSET intro2
 00000012  E8 00000000 E     1		CALL	WriteString
 00000017  5A		     1		POP		EDX

					; get input
 00000018  B9 0000000A			MOV		ECX, LENGTHOF numArray
 0000001D  BF 00000200 R		MOV		EDI, OFFSET numArray

 00000022			_getNext:
 00000022  68 000000EC R		PUSH	OFFSET prompt1
 00000027  68 0000010B R		PUSH	OFFSET error1
 0000002C  68 000001E7 R		PUSH	OFFSET userInput
 00000031  6A 15			PUSH	SIZEOF userInput
 00000033  68 000001FC R		PUSH	OFFSET inpLen
 00000038  E8 000000A1			CALL	ReadVal		; gets next input and validates
 0000003D  89 1F			MOV		[EDI], EBX	; move validated input to array
 0000003F  83 C7 04			ADD		EDI, 4		; increment array index
 00000042  E2 DE			LOOP	_getNext

					; calculations while printing array
					mDisplayString	OFFSET results1
 00000044  52		     1		PUSH	EDX
 00000045  BA 00000149 R     1		MOV		EDX, OFFSET results1
 0000004A  E8 00000000 E     1		CALL	WriteString
 0000004F  5A		     1		POP		EDX
 00000050  83 EF 28			SUB		EDI, SIZEOF numArray
 00000053  B9 0000000A			MOV		ECX, 10
 00000058			_calcNext:
 00000058  8B 07			MOV		EAX, [EDI]
 0000005A  83 C7 04			ADD		EDI, 4
 0000005D  01 05 00000228 R		ADD		sum, EAX
					; call writeVal
 00000063  68 00000230 R		PUSH	OFFSET outString
 00000068  50				PUSH	EAX
 00000069  E8 00000106			CALL	WriteVal
 0000006E  83 F9 01			CMP		ECX, 1
 00000071  74 0C			JE		_skipComma
					mDisplayString	OFFSET comma
 00000073  52		     1		PUSH	EDX
 00000074  BA 000001AD R     1		MOV		EDX, OFFSET comma
 00000079  E8 00000000 E     1		CALL	WriteString
 0000007E  5A		     1		POP		EDX
 0000007F			_skipComma:
 0000007F  E2 D7			LOOP	_calcNext

 00000081  A1 00000228 R		MOV		EAX, sum
 00000086  BB 0000000A			MOV		EBX, 10
 0000008B  99				CDQ
 0000008C  F7 FB			IDIV	EBX
 0000008E  A3 0000022C R		MOV		avg, EAX

					; display results
					mDisplayString	OFFSET results2
 00000093  52		     1		PUSH	EDX
 00000094  BA 00000170 R     1		MOV		EDX, OFFSET results2
 00000099  E8 00000000 E     1		CALL	WriteString
 0000009E  5A		     1		POP		EDX
 0000009F  68 00000230 R		PUSH	OFFSET outString
 000000A4  FF 35 00000228 R		PUSH	sum
 000000AA  E8 000000C5			CALL	WriteVal

					mDisplayString	OFFSET results3
 000000AF  52		     1		PUSH	EDX
 000000B0  BA 00000190 R     1		MOV		EDX, OFFSET results3
 000000B5  E8 00000000 E     1		CALL	WriteString
 000000BA  5A		     1		POP		EDX
 000000BB  68 00000230 R		PUSH	OFFSET	outString
 000000C0  FF 35 0000022C R		PUSH	avg
 000000C6  E8 000000A9			CALL	WriteVal

					; goodbye
					mDisplayString	OFFSET farewell
 000000CB  52		     1		PUSH	EDX
 000000CC  BA 000001B0 R     1		MOV		EDX, OFFSET farewell
 000000D1  E8 00000000 E     1		CALL	WriteString
 000000D6  5A		     1		POP		EDX

					Invoke ExitProcess,0	; exit to operating system
 000000D7  6A 00	   *	    push   +000000000h
 000000D9  E8 00000000 E   *	    call   ExitProcess
 000000DE			main ENDP

				; (insert additional procedures here)

				;--------------------------------------------------------------------------
				; name: ReadVal
				;
				; Reads user input and converts from string to integer
				;
				;
				; Postconditions: 	EBX will store the validated input
				;
				;
				; Receives: 		[EBP+24]	- string address for prompt1
				;					[EBP+20]	- string address for error1
				;					[EBP+16]	- string address for userInput
				;					[EBP+12]	- max size of userInput
				;					[EBP+8]		- actual length of userInput
				;
				; Returns: 			validated signed integer in EBX
				;--------------------------------------------------------------------------
 000000DE			ReadVal PROC
 000000DE  55				PUSH	EBP
 000000DF  8B EC			MOV		EBP, ESP
 000000E1  51				PUSH	ECX

 000000E2			_prompt:
					mGetString	[EBP + 24], [EBP + 16], [EBP + 12], [EBP + 8]	; prompts for input, saving input in [EBP + 16] and its size in [EBP + 8]
 000000E2  50		     1		PUSH	EAX
 000000E3  51		     1		PUSH	ECX
 000000E4  52		     1		PUSH	EDX
 000000E5  8B 55 18	     1		MOV		EDX, [EBP + 24]
 000000E8  E8 00000000 E     1		CALL	WriteString
 000000ED  8B 55 10	     1		MOV		EDX, [EBP + 16]
 000000F0  8B 4D 0C	     1		MOV		ECX, [EBP + 12]
 000000F3  E8 00000000 E     1		CALL	ReadString
 000000F8  89 45 08	     1		MOV		[EBP + 8], EAX
 000000FB  5A		     1		POP		EDX
 000000FC  59		     1		POP		ECX
 000000FD  58		     1		POP		EAX
 000000FE  8B 75 10			MOV		ESI, [EBP + 16]		; Mov user string into source register
 00000101  8B 4D 08			MOV		ECX, [EBP + 8]		; Mov string length into counter register
 00000104  83 F9 0B			CMP		ECX, MAX_SIZE		; Check if input is too large
 00000107  7F 50			JG		_badInput
 00000109  41				INC		ECX
 0000010A  B8 00000000			MOV		EAX, 0
 0000010F  BB 00000000			MOV		EBX, 0				; numerified input tracker
 00000114  BA 00000000			MOV		EDX, 0
 00000119  FC				CLD

					; check for +/- sign
 0000011A  AC				LODSB
 0000011B  3C 00			CMP		AL, 0
 0000011D  74 3A			JE		_badInput
 0000011F  3C 2B			CMP		AL, 43		; compare with '+' ASCII
 00000121  74 06			JE		_positive
 00000123  3C 2D			CMP		AL, 45		; compare with '-' ASCII
 00000125  74 0A			JE		_negative
 00000127  EB 0F			JMP		_noSign

 00000129			_positive:
 00000129  BA 00000000			MOV		EDX, 0		; Set 'sign flag' off
 0000012E  49				DEC		ECX
 0000012F  EB 06			JMP		_nums

 00000131			_negative:
 00000131  BA 00000001			MOV		EDX, 1		; Set 'sign flag' on
 00000136  49				DEC		ECX

 00000137			_nums:
 00000137  AC				LODSB				; get next char from input string
 00000138			_noSign:
 00000138  3C 00			CMP		AL, 0		; check for end of input
 0000013A  74 2C			JE		_end
 0000013C  3C 30			CMP		AL, 48		; check bottom range of ASCII numbers
 0000013E  72 19			JB		_badInput
 00000140  3C 39			CMP		AL, 57		; check top range of ASCII numbers
 00000142  77 15			JA		_badInput

					; char in good range. Sub 48 to get numeric value
 00000144  2C 30			SUB		AL, 48
					; num = 10 * num + AL
 00000146  50				PUSH	EAX
 00000147  52				PUSH	EDX
 00000148  8B C3			MOV		EAX, EBX
 0000014A  BB 0000000A			MOV		EBX, 10
 0000014F  F7 E3			MUL		EBX
 00000151  8B D8			MOV		EBX, EAX
 00000153  5A				POP		EDX
 00000154  58				POP		EAX
 00000155  03 D8			ADD		EBX, EAX
 00000157  E2 DE			LOOP	_nums

 00000159			_badInput:
					mDisplayString	[EBP+20]	; Display error message
 00000159  52		     1		PUSH	EDX
 0000015A  8B 55 14	     1		MOV		EDX, [EBP+20]
 0000015D  E8 00000000 E     1		CALL	WriteString
 00000162  5A		     1		POP		EDX
 00000163  E9 FFFFFF7A			JMP		_prompt

 00000168			_end:
					; if sign flag is on, negate EBX
 00000168  83 FA 01			CMP		EDX, 1
 0000016B  75 02			JNE		_skip
 0000016D  F7 DB			NEG		EBX
 0000016F			_skip:
 0000016F  59				POP		ECX
 00000170  5D				POP		EBP
 00000171  C2 0014			RET		20
 00000174			ReadVal ENDP

				;--------------------------------------------------------------------------
				; name: WriteVal
				;
				; Converts signed integer to string and prints using mDisplayString
				;
				;
				; Preconditions:	OFFSET outString and an int to print pushed to stack
				;
				; Postconditions:	String at [EBP+12] changed to ASCII representation of int at [EBP+8]
				;
				; Receives: 		[EBP+12]	- outString address
				;					[EBP+8]		- int to convert
				;
				;--------------------------------------------------------------------------
 00000174			WriteVal PROC
 00000174  55				PUSH	EBP
 00000175  8B EC			MOV		EBP, ESP
 00000177  60				PUSHAD

 00000178  8B 7D 0C			MOV		EDI, [EBP+12]		; move string address to destination register
 0000017B  8B 45 08			MOV		EAX, [EBP+8]		; move int to print to EAX
 0000017E  B9 00000000			MOV		ECX, 0				; stack counter
 00000183  FC				CLD

					; check for negative
 00000184  83 F8 00			CMP		EAX, 0
 00000187  7D 0A			JGE		_readRight
 00000189  F7 D8			NEG		EAX					; make positive for uniform string printing later
 0000018B  50				PUSH	EAX
 0000018C  B8 0000002D			MOV		EAX, 45				; '-' in ASCII
 00000191  AA				STOSB
 00000192  58				POP		EAX

					; get characters from right to left by dividing by 10 and pushing remainder to stack.
					; also incriment ECX to keep track of how many to pop later.
 00000193			_readRight:
 00000193  BB 0000000A			MOV		EBX, 10
 00000198  99				CDQ
 00000199  F7 F3			DIV		EBX
 0000019B  83 F8 00			CMP		EAX, 0
 0000019E  74 07			JE		_lastDigit
 000001A0  83 C2 30			ADD		EDX, 48				; add 48 to get from int to the same number in ASCII
 000001A3  52				PUSH	EDX
 000001A4  41				INC		ECX
 000001A5  EB EC			JMP		_readRight
 000001A7			_lastDigit:						; do it one last time without jumping back to _readRight
 000001A7  83 C2 30			ADD		EDX, 48
 000001AA  52				PUSH	EDX
 000001AB  41				INC		ECX

					; Fill string indicies by popping values from stack
 000001AC			_popDigit:
 000001AC  58				POP		EAX
 000001AD  AA				STOSB
 000001AE  E2 FC			LOOP	_popDigit
					
					mDisplayString	[EBP+12]
 000001B0  52		     1		PUSH	EDX
 000001B1  8B 55 0C	     1		MOV		EDX, [EBP+12]
 000001B4  E8 00000000 E     1		CALL	WriteString
 000001B9  5A		     1		POP		EDX

					; nullify string for later
 000001BA  8B 7D 0C			MOV		EDI, [EBP+12]
 000001BD  B8 00000000			MOV		EAX, 0
 000001C2  B9 0000000A			MOV		ECX, 10
 000001C7			_nullify:
 000001C7  AA				STOSB
 000001C8  E2 FD			LOOP _nullify

 000001CA  61				POPAD
 000001CB  5D				POP		EBP
 000001CC  C2 0008			RET		8
 000001CF			WriteVal ENDP

				END main
Microsoft (R) Macro Assembler Version 14.30.30709.0	    12/04/22 15:42:17
4String Primitives and Macros    (Proj6_kramepat.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000023B Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001CF Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000DE _TEXT	Length= 00000096 Public STDCALL
  _prompt  . . . . . . . . . . .	L Near	 000000E2 _TEXT	
  _positive  . . . . . . . . . .	L Near	 00000129 _TEXT	
  _negative  . . . . . . . . . .	L Near	 00000131 _TEXT	
  _nums  . . . . . . . . . . . .	L Near	 00000137 _TEXT	
  _noSign  . . . . . . . . . . .	L Near	 00000138 _TEXT	
  _badInput  . . . . . . . . . .	L Near	 00000159 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 00000168 _TEXT	
  _skip  . . . . . . . . . . . .	L Near	 0000016F _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000174 _TEXT	Length= 0000005B Public STDCALL
  _readRight . . . . . . . . . .	L Near	 00000193 _TEXT	
  _lastDigit . . . . . . . . . .	L Near	 000001A7 _TEXT	
  _popDigit  . . . . . . . . . .	L Near	 000001AC _TEXT	
  _nullify . . . . . . . . . . .	L Near	 000001C7 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000DE Public STDCALL
  _getNext . . . . . . . . . . .	L Near	 00000022 _TEXT	
  _calcNext  . . . . . . . . . .	L Near	 00000058 _TEXT	
  _skipComma . . . . . . . . . .	L Near	 0000007F _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_SIZE . . . . . . . . . . . .	Number	 0000000Bh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
avg  . . . . . . . . . . . . . .	DWord	 0000022C _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
comma  . . . . . . . . . . . . .	Byte	 000001AD _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
error1 . . . . . . . . . . . . .	Byte	 0000010B _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
farewell . . . . . . . . . . . .	Byte	 000001B0 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inpLen . . . . . . . . . . . . .	DWord	 000001FC _DATA	
intro1 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 00000035 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numArray . . . . . . . . . . . .	DWord	 00000200 _DATA	
outString  . . . . . . . . . . .	Byte	 00000230 _DATA	
prompt1  . . . . . . . . . . . .	Byte	 000000EC _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
results1 . . . . . . . . . . . .	Byte	 00000149 _DATA	
results2 . . . . . . . . . . . .	Byte	 00000170 _DATA	
results3 . . . . . . . . . . . .	Byte	 00000190 _DATA	
sum  . . . . . . . . . . . . . .	DWord	 00000228 _DATA	
userInput  . . . . . . . . . . .	Byte	 000001E7 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
